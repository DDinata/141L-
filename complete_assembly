// PROGRAM 1
//program 1 - input addr 8-9, output addr 10-11

// $r0|$r1|$r2 - num
// $r3|$r4|$r5 - div
// $r11 - result setter
// $r9 - index
// $r8 - left shift amount

acc 8   // $r3 = div[15:8]
ld $r3  // $r3 = div[15:8]
acc 9   // $r4 = div[7:0]
ld $r4  // $r4 = div[7:0]
acc 0   // $r5 = div[-1:-8] = 00
mov $r5 // $r5 = div[-1:-8] = 00

acc 0   // $r0 = num[15:8] = 80
bcc 8   // $r0 = num[15:8] = 80
acc 0   // $r1 = num[7:0] = 00
mov $r1 // $r1 = num[7:0] = 00
acc 0   // $r2 = num[-1:-8] = 00
mov $r2 // $r2 = num[-1:-8 = 00

// Generate index and left shift amount
// $r9 = index
// $r8 = lsa
// set $r9 = $r8 = 7-m or 15-m

targ LEFTNZ
bez $r3 // check if div[15:8] == 0 (lsa between 7-0)
acc 7   // if div[15:8] > 0
mov $r9 // index = 7 (max possible val)
mov $r8 // lsa = 7 (max possible val)
mmm $r3 // get mmm from div[15:8]
sub $r9 // index = 7-m
sub $r8 // lsa = 7-m
targ LEFT_SHIFT_PREP
bez $rz

LEFTNZ:
acc 15  // if div[15:8] == 0 (lsa between 15-8)
mov $r9 // index = 15
mov $r8 // lsa = 15
mmm $r4 // get mmm from div[7:0]
sub $r9 // index = 15-m
sub $r8 // lsa = 15-m

targ SKIP_CORNER
bnz $r4 // if div[7:0] == 0 return 0xffff
acc 15
bcc 15
mov $r11
acc 10
st $r11
acc 11
st $r11
targ MEMSTORE
bez $rz
SKIP_CORNER:
acc 0

LEFT_SHIFT_PREP:
targ MAIN_LOOP
bez $r8 // dont loop if lsa = 0

// left shifts $r3|$r4 until mmm of $r3 is 1
// dec left shift amount each iter
LEFT_SHIFT:
shl $r4  // 2-byte carry out left shift
ccc      // 2-byte carry out left shift
shlc $r3 // 2-byte carry out left shift
dec $r8  // lsa--
targ LEFT_SHIFT
bnz $r8  // keep shifting if lsa not zero



// $r3|$r4|$r5 is left shifted all the way
// $r9 contains how much we shifted

MAIN_LOOP:

// if num < div, skip over SET_BIT and go to WRITE_CHECK
get $r0             // branch $r3 > $r0 -> WRITE_CHECK
mov $rbc            // branch $r3 > $r0 -> WRITE_CHECK
targ WRITE_CHECK    // branch $r3 > $r0 -> WRITE_CHECK
bgt $r3             // branch $r3 > $r0 -> WRITE_CHECK

targ SUB_SET_BIT    // branch $r3 < $r0 -> SUB_SET_BIT
blt $r3             // branch $r3 < $r0 -> SUB_SET_BIT

get $r1             // branch $r4 > $r1 -> WRITE_CHECK
mov $rbc            // branch $r4 > $r1 -> WRITE_CHECK
targ WRITE_CHECK    // branch $r4 > $r1 -> WRITE_CHECK
bgt $r4             // branch $r4 > $r1 -> WRITE_CHECK

SUB_SET_BIT: // num >= div, so sub and set bit
get $r5  // 3-byte borrowed subtraction
sub $r2  // 3-byte borrowed subtraction
ccc      // 3-byte borrowed subtraction
get $r4  // 3-byte borrowed subtraction
subc $r1 // 3-byte borrowed subtraction
ccc      // 3-byte borrowed subtraction
get $r3  // 3-byte borrowed subtraction
subc $r0 // 3-byte borrowed subtraction
get $r9  // set bit with mod of index
set $r11  // set bit with mod of index

// want index == 8 -> then write the left half of output
WRITE_CHECK:
acc 8
mov $rbc
targ LOOP_CHECK
bne $r9 // if index != 8, go to LOOP_CHECK
acc 10  // index == 8, so write $r11 to mem and clear
st $r11
acc 0
mov $r11

LOOP_CHECK:
shr $r3  // 3-byte carry out right shift
ccc      // 3-byte carry out right shift
shrc $r4 // 3-byte carry out right shift
ccc      // 3-byte carry out right shift
shrc $r5 // 3-byte carry out right shift
targ PRECISION
bez $r9  // precision if index == 0
dec $r9  // otherwise, index--
targ MAIN_LOOP
bez $rz  // jmp to MAIN_LOOP for another iter


PRECISION:

get $r0             // branch $r3 > $r0 -> MEMSTORE
mov $rbc            // branch $r3 > $r0 -> MEMSTORE
targ MEMSTORE       // branch $r3 > $r0 -> MEMSTORE
bgt $r3             // branch $r3 > $r0 -> MEMSTORE

targ ROUND_UP       // branch $r3 < $r0 -> ROUND_UP
blt $r3             // branch $r3 < $r0 -> ROUND_UP

get $r1             // branch $r4 > $r1 -> MEMSTORE
mov $rbc            // branch $r4 > $r1 -> MEMSTORE
targ MEMSTORE       // branch $r4 > $r1 -> MEMSTORE
bgt $r4             // branch $r4 > $r1 -> MEMSTORE

targ ROUND_UP       // branch $r4 < $r1 -> ROUND_UP
blt $r4             // branch $r4 < $r1 -> ROUND_UP

get $rz             // branch $r5 > $rz -> MEMSTORE
mov $rbc            // branch $r5 > $rz -> MEMSTORE
targ MEMSTORE       // branch $r5 > $rz -> MEMSTORE
bgt $r5             // branch $r5 > $rz -> MEMSTORE

ROUND_UP:
acc 1
add $r11

MEMSTORE:
// store $r11 to mem 11
acc 11
st $r11

// clear out all registers used
acc 0
mov $r0
mov $r1
mov $r2
mov $r3
mov $r4
mov $r5
mov $r8
mov $r9
mov $r11 // PROGRAM 1 HALT


// PROGRAM 2
//program 2 - input addr 0-1,2, output addr 4-6

// $r0|$r1|$r2 - num
// $r3|$r4|$r5|$r6 - div
// $r11 - result setter
// $r9 - index
// $r8 - left shift amount

acc 2   // $r3 = div
ld $r3  // $r3 = div
acc 0   // $r4 = 00
mov $r4 // $r4 = 00
mov $r5 // $r5 = 00

acc 0   // $r0 = num[15:8]
ld $r0  // $r0 = num[15:8]
acc 1   // $r1 = num[7:0]
ld $r1  // $r1 = num[7:0]
acc 0   // $r2 = num[-1:-8] = 00
mov $r2 // $r2 = num[-1:-8] = 00

// Generate index and left shift amount
// $r9 = index
// $r8 = lsa
// set $r9 = 23 - m
// set $r8 = 7 - m

acc 7   // index = 23
bcc 1   // index = 23
mov $r9 // index = 23
mmm $r3 // get mmm from div
sub $r9 // index = 23-m
acc 7   // lsa = 7
mov $r8 // lsa = 7
mmm $r3 // get mmm from div
sub $r8 // lsa = 7-m

targ SKIP_CORNER_2
bnz $r3 // if div == 0 return 0xffffff
acc 15
bcc 15
mov $r11
acc 4
st $r11
acc 5
st $r11
acc 6
st $r11
targ MEMSTORE_2
bez $rz
SKIP_CORNER_2:
acc 0


targ MAIN_LOOP_2
bez $r8 // dont loop if lsa = 0

// left shifts $r3 until mmm of $r3 is 1
// dec left shift amount each iter
LEFT_SHIFT_2:
shl $r3  // left shift div
dec $r8  // lsa--
targ LEFT_SHIFT_2
bnz $r8  // keep shifting if lsa not zero



// $r3|$r4|$r5|$r6 is left shifted all the way
// $r9 contains index

MAIN_LOOP_2:

// if num < div, skip over SET_BIT and go to WRITE_CHECK_2
get $r0             // branch $r3 > $r0 -> WRITE_CHECK_2
mov $rbc            // branch $r3 > $r0 -> WRITE_CHECK_2
targ WRITE_CHECK_2    // branch $r3 > $r0 -> WRITE_CHECK_2
bgt $r3             // branch $r3 > $r0 -> WRITE_CHECK_2

targ SUB_SET_BIT_2    // branch $r3 < $r0 -> SUB_SET_BIT_2
blt $r3             // branch $r3 < $r0 -> SUB_SET_BIT_2

get $r1             // branch $r4 > $r1 -> WRITE_CHECK_2
mov $rbc            // branch $r4 > $r1 -> WRITE_CHECK_2
targ WRITE_CHECK_2    // branch $r4 > $r1 -> WRITE_CHECK_2
bgt $r4             // branch $r4 > $r1 -> WRITE_CHECK_2

targ SUB_SET_BIT_2    // branch $r4 < $r4 -> SUB_SET_BIT_2
blt $r4             // branch $r4 < $r4 -> SUB_SET_BIT_2

get $r2             // branch $r5 > $r2 -> WRITE_CHECK_2
mov $rbc            // branch $r5 > $r2 -> WRITE_CHECK_2
targ WRITE_CHECK_2    // branch $r5 > $r2 -> WRITE_CHECK_2
bgt $r5             // branch $r5 > $r2 -> WRITE_CHECK_2

SUB_SET_BIT_2: // num >= div, so sub and set bit
get $r5  // 3-byte borrowed subtraction
sub $r2  // 3-byte borrowed subtraction
ccc      // 3-byte borrowed subtraction
get $r4  // 3-byte borrowed subtraction
subc $r1 // 3-byte borrowed subtraction
ccc      // 3-byte borrowed subtraction
get $r3  // 3-byte borrowed subtraction
subc $r0 // 3-byte borrowed subtraction
get $r9  // set bit with mod of index
set $r11  // set bit with mod of index

WRITE_CHECK_2:
// want index == 16 -> then write output
acc 0     // check index == 16
bcc 1     // check index == 16
mov $rbc  // check index == 16
targ WRITE_CHECK_AGAIN_2
bne $r9   // if index != 16, go to WRITE_CHECK_AGAIN_2
acc 4     // index == 16, storing $r11 to mem 4
st $r11   // index == 16, storing $r11 to mem 4
acc 0     // clear $r11
mov $r11  // clear $r11

WRITE_CHECK_AGAIN_2:
// index != 16, but check if index == 8
acc 8     // check index == 8
mov $rbc  // check index == 8
targ LOOP_CHECK_2
bne $r9   // if index != 8, go to LOOP_CHECK_2
acc 5     // index == 8, storing $r11 to mem 5
st $r11   // index == 8, storing $r11 to mem 5
acc 0     // clear $r11
mov $r11  // clear $r11

LOOP_CHECK_2:
shr $r3  // 4-byte carry out right shift
ccc      // 4-byte carry out right shift
shrc $r4 // 4-byte carry out right shift
ccc      // 4-byte carry out right shift
shrc $r5 // 4-byte carry out right shift
ccc      // 4-byte carry out right shift
shrc $r6 // 4-byte carry out right shift
targ PRECISION_2
bez $r9  // PRECISION_2 if index == 0
dec $r9  // otherwise, index--
targ MAIN_LOOP_2
bez $rz  // jmp to MAIN_LOOP_2 for another iter


PRECISION_2:

get $r0             // branch $r3 > $r0 -> MEMSTORE_2
mov $rbc            // branch $r3 > $r0 -> MEMSTORE_2
targ MEMSTORE_2       // branch $r3 > $r0 -> MEMSTORE_2
bgt $r3             // branch $r3 > $r0 -> MEMSTORE_2

targ ROUND_UP_2       // branch $r3 < $r0 -> ROUND_UP_2
blt $r3             // branch $r3 < $r0 -> ROUND_UP_2

get $r1             // branch $r4 > $r1 -> MEMSTORE_2
mov $rbc            // branch $r4 > $r1 -> MEMSTORE_2
targ MEMSTORE_2       // branch $r4 > $r1 -> MEMSTORE_2
bgt $r4             // branch $r4 > $r1 -> MEMSTORE_2

targ ROUND_UP_2       // branch $r4 < $r1 -> ROUND_UP_2
blt $r4             // branch $r4 < $r1 -> ROUND_UP_2

get $r2             // branch $r5 > $r2 -> MEMSTORE_2
mov $rbc            // branch $r5 > $r2 -> MEMSTORE_2
targ MEMSTORE_2       // branch $r5 > $r2 -> MEMSTORE_2
bgt $r5             // branch $r5 > $r2 -> MEMSTORE_2

targ ROUND_UP_2       // branch $r5 < $r2 -> ROUND_UP_2
blt $r5             // branch $r5 < $r2 -> ROUND_UP_2

get $rz             // branch $r6 > $rz -> MEMSTORE_2
mov $rbc            // branch $r6 > $rz -> MEMSTORE_2
targ MEMSTORE_2       // branch $r6 > $rz -> MEMSTORE_2
bgt $r6             // branch $r6 > $rz -> MEMSTORE_2

ROUND_UP_2:
acc 1
add $r11

MEMSTORE_2:
acc 6    // store $r11 to mem 6
st $r11  // store $r11 to mem 6

// clear out all registers used
acc 0
mov $r0
mov $r1
mov $r2
mov $r3
mov $r4
mov $r5
mov $r6
mov $r8
mov $r9
mov $r11 // PROGRAM 2 HALT


// PROGRAM 3
// program 3 - input addr 12-13, output addr 14

// $r0|$r1|$r2 - x_0
// $r3|$r4|$r5 - x_n
// $r7 counter

acc 12  // set initial x_n
ld $r3  // set initial x_n
acc 13  // set initial x_n
ld $r4  // set initial x_n
acc 0   // set initial x_n
mov $r5 // set initial x_n

acc 0   // set counter to 128
bcc 4   // set counter to 128
mov $r7 // set counter to 128

// corner check if msw == 0xff return 0xff
acc 15
bcc 15
mov $rbc
targ SQRT_LOOP_3
bne $r3
acc 15
bcc 15
mov $r4
acc 14
st $r4
targ FINISH_3
bez $rz

SQRT_LOOP_3:

acc 0  // st r3-r5 -> mem16-mem18
bcc 1  // st r3-r5 -> mem16-mem18
st $r3 // st r3-r5 -> mem16-mem18
acc 1  // st r3-r5 -> mem16-mem18
bcc 1  // st r3-r5 -> mem16-mem18
st $r4 // st r3-r5 -> mem16-mem18
acc 2  // st r3-r5 -> mem16-mem18
bcc 1  // st r3-r5 -> mem16-mem18
st $r5 // st r3-r5 -> mem16-mem18

acc 12  // ld x_0 -> r3-r5
ld $r0  // ld x_0 -> r3-r5
acc 13  // ld x_0 -> r3-r5
ld $r1  // ld x_0 -> r3-r5
acc 0   // ld x_0 -> r3-r5
mov $r2 // ld x_0 -> r3-r5

// Generate index and left shift amount
// divisor mmm will either be in msw or second
// $r9 = index
// $r8 = lsa
// set $r8 = 7-m or 15-m
// set $r9 = $r8 + 8 to account for extra word

targ LEFTNZ_3
bez $r3 // check if div[15:8] == 0 (lsa between 7-0)
acc 7   // if div[15:8] > 0
mov $r9 // index = 7 (max possible val)
mov $r8 // lsa = 7 (max possible val)
mmm $r3 // get mmm from div[15:8]
sub $r9 // index = 7-m
sub $r8 // lsa = 7-m
targ LREF_SHIFT_PREP_3
bez $rz

LEFTNZ_3:
acc 15  // if div[15:8] == 0 (lsa between 15-8)
mov $r9 // index = 15
mov $r8 // lsa = 15
mmm $r4 // get mmm from div[7:0]
sub $r9 // index = 15-m
sub $r8 // lsa = 15-m


LREF_SHIFT_PREP_3:
acc 8    // index+=8 to account for extra word
add $r9  // index+=8 to account for extra word
targ MAIN_LOOP_3
bez $r8 // dont loop if lsa = 0

// left shifts $r3|$r4|$r5 until mmm of $r3 is msb
// dec left shift amount each iter
LEFT_SHIFT_3:
shl $r5  // 3-byte carry out left shift
ccc      // 3-byte carry out left shift
shlc $r4 // 3-byte carry out left shift
ccc      // 3-byte carry out left shift
shlc $r3 // 3-byte carry out left shift
dec $r8  // lsa--
targ LEFT_SHIFT_3
bnz $r8  // keep shifting if lsa not zero


// $r3|$r4|$r5 is left shifted all the way
// $r9 contains index
// $r11 result setter
acc 0    // clear $r11
mov $r11 // clear $r11

MAIN_LOOP_3:

// if num < div, skip over SET_BIT and go to WRITE_CHECK_3
get $r0             // branch $r3 > $r0 -> WRITE_CHECK_3
mov $rbc            // branch $r3 > $r0 -> WRITE_CHECK_3
targ WRITE_CHECK_3    // branch $r3 > $r0 -> WRITE_CHECK_3
bgt $r3             // branch $r3 > $r0 -> WRITE_CHECK_3

targ SUB_SET_BIT_3    // branch $r3 < $r0 -> SUB_SET_BIT_3
blt $r3             // branch $r3 < $r0 -> SUB_SET_BIT_3

get $r1             // branch $r4 > $r1 -> WRITE_CHECK_3
mov $rbc            // branch $r4 > $r1 -> WRITE_CHECK_3
targ WRITE_CHECK_3    // branch $r4 > $r1 -> WRITE_CHECK_3
bgt $r4             // branch $r4 > $r1 -> WRITE_CHECK_3

targ SUB_SET_BIT_3    // branch $r4 < $r4 -> SUB_SET_BIT_3
blt $r4             // branch $r4 < $r4 -> SUB_SET_BIT_3

get $r2             // branch $r5 > $r2 -> WRITE_CHECK_3
mov $rbc            // branch $r5 > $r2 -> WRITE_CHECK_3
targ WRITE_CHECK_3    // branch $r5 > $r2 -> WRITE_CHECK_3
bgt $r5             // branch $r5 > $r2 -> WRITE_CHECK_3

SUB_SET_BIT_3: // num >= div, so sub and set bit
get $r5  // 3-byte borrowed subtraction
sub $r2  // 3-byte borrowed subtraction
ccc      // 3-byte borrowed subtraction
get $r4  // 3-byte borrowed subtraction
subc $r1 // 3-byte borrowed subtraction
ccc      // 3-byte borrowed subtraction
get $r3  // 3-byte borrowed subtraction
subc $r0 // 3-byte borrowed subtraction
get $r9  // set bit with mod of index
set $r11  // set bit with mod of index

WRITE_CHECK_3:
// want index == 16 -> then write output
acc 0     // check index == 16
bcc 1     // check index == 16
mov $rbc  // check index == 16
targ WRITE_CHECK_AGAIN_3
bne $r9   // if index != 16, go to WRITE_CHECK_AGAIN_3
acc 3     // index == 16, storing $r11 to mem 19
bcc 1     // index == 16, storing $r11 to mem 19
st $r11   // index == 16, storing $r11 to mem 19
acc 0     // clear $r11
mov $r11  // clear $r11

WRITE_CHECK_AGAIN_3:
// index != 16, but check if index == 8
acc 8     // check index == 8
mov $rbc  // check index == 8
targ LOOP_CHECK_3
bne $r9   // if index != 8, go to LOOP_CHECK_3
acc 4     // index == 8, storing $r11 to mem 20
bcc 1     // index == 8, storing $r11 to mem 20
st $r11   // index == 8, storing $r11 to mem 20
acc 0     // clear $r11
mov $r11  // clear $r11

LOOP_CHECK_3:
shr $r3  // 3-byte carry out right shift
ccc      // 3-byte carry out right shift
shrc $r4 // 3-byte carry out right shift
ccc      // 3-byte carry out right shift
shrc $r5 // 3-byte carry out right shift
targ MEMSTORE_3
bez $r9  // MEMSTORE_3 if index == 0
dec $r9  // otherwise, index--
targ MAIN_LOOP_3
bez $rz  // jmp to MAIN_LOOP_3 for another iter


MEMSTORE_3:
acc 5     // store $r11 to mem 21
bcc 1     // store $r11 to mem 21
st $r11   // store $r11 to mem 21
acc 0     // clear $r11
mov $r11  // clear $r11


acc 3   // ld x_0/x_n -> r0-r2
bcc 1   // ld x_0/x_n -> r0-r2
ld $r0  // ld x_0/x_n -> r0-r2
acc 4   // ld x_0/x_n -> r0-r2
bcc 1   // ld x_0/x_n -> r0-r2
ld $r1  // ld x_0/x_n -> r0-r2
acc 5   // ld x_0/x_n -> r0-r2
bcc 1   // ld x_0/x_n -> r0-r2
ld $r2  // ld x_0/x_n -> r0-r2

acc 0  // ld  mem16-mem18 -> r3-r5
bcc 1  // ld  mem16-mem18 -> r3-r5
ld $r3 // ld  mem16-mem18 -> r3-r5
acc 1  // ld  mem16-mem18 -> r3-r5
bcc 1  // ld  mem16-mem18 -> r3-r5
ld $r4 // ld  mem16-mem18 -> r3-r5
acc 2  // ld  mem16-mem18 -> r3-r5
bcc 1  // ld  mem16-mem18 -> r3-r5
ld $r5 // ld  mem16-mem18 -> r3-r5

get $r2  // 3-byte addition
add $r5  // 3-byte addition
ccc      // 3-byte addition
get $r1  // 3-byte addition
addc $r4 // 3-byte addition
ccc      // 3-byte addition
get $r0  // 3-byte addition
addc $r3 // 3-byte addition

shr $r3  // 3-byte right shift for halving
ccc      // 3-byte right shift for halving
shrc $r4 // 3-byte right shift for halving
ccc      // 3-byte right shift for halving
shrc $r5 // 3-byte right shift for halving

dec $r7
targ SQRT_LOOP_3
bnz $r7

shr $r5
shr $r5
shr $r5
shr $r5
shr $r5
shr $r5
shr $r5
get $r5
add $r4
acc 14
st $r4

FINISH_3:
acc 0 // PROGRAM 3 HALT
