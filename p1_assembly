//program 1 - input addr 8-9, output addr 10-11

// $r0|$r1|$r2 - num
// $r3|$r4|$r5 - div
// $r11 - result setter
// $r9 - index
// $r8 - left shift amount

acc 8   // $r3 = div[15:8]
ld $r3  // $r3 = div[15:8]
acc 9   // $r4 = div[7:0]
ld $r4  // $r4 = div[7:0]
acc 0   // $r5 = div[-1:-8] = 00
mov $r5 // $r5 = div[-1:-8] = 00

acc 0   // $r0 = num[15:8] = 80
bcc 8   // $r0 = num[15:8] = 80
mov $r0 // $r0 = num[15:8] = 80
acc 0   // $r1 = num[7:0] = 00
mov $r1 // $r1 = num[7:0] = 00
acc 0   // $r2 = num[-1:-8] = 00
mov $r2 // $r2 = num[-1:-8 = 00

// Generate index and left shift amount
// $r9 = index
// $r8 = lsa
// set $r9 = $r8 = 7-m or 15-m

targ LEFTNZ
bez $r3 // check if div[15:8] == 0 (lsa between 7-0)
acc 7   // if div[15:8] > 0
mov $r9 // index = 7 (max possible val)
mov $r8 // lsa = 7 (max possible val)
mmm $r3 // get mmm from div[15:8]
sub $r9 // index = 7-m
sub $r8 // lsa = 7-m
targ LEFT_SHIFT_PREP
bez $rz

LEFTNZ:
acc 15  // if div[15:8] == 0 (lsa between 15-8)
mov $r9 // index = 15
mov $r8 // lsa = 15
mmm $r4 // get mmm from div[7:0]
sub $r9 // index = 15-m
sub $r8 // lsa = 15-m

targ SKIP_CORNER
bnz $r4 // if div[7:0] == 0 return 0xffff
acc 15
bcc 15
mov $r11
acc 10
st $r11
acc 11
st $r11
targ MEMSTORE
bez $rz
SKIP_CORNER:
acc 0

LEFT_SHIFT_PREP:
targ MAIN_LOOP
bez $r8 // dont loop if lsa = 0

// left shifts $r3|$r4 until mmm of $r3 is 1
// dec left shift amount each iter
LEFT_SHIFT:
shl $r4  // 2-byte carry out left shift
ccc      // 2-byte carry out left shift
shlc $r3 // 2-byte carry out left shift
dec $r8  // lsa--
targ LEFT_SHIFT
bnz $r8  // keep shifting if lsa not zero



// $r3|$r4|$r5 is left shifted all the way
// $r9 contains how much we shifted

MAIN_LOOP:

// if num < div, skip over SET_BIT and go to WRITE_CHECK
get $r0             // branch $r3 > $r0 -> WRITE_CHECK
mov $rbc            // branch $r3 > $r0 -> WRITE_CHECK
targ WRITE_CHECK    // branch $r3 > $r0 -> WRITE_CHECK
bgt $r3             // branch $r3 > $r0 -> WRITE_CHECK

targ SUB_SET_BIT    // branch $r3 < $r0 -> SUB_SET_BIT
blt $r3             // branch $r3 < $r0 -> SUB_SET_BIT

get $r1             // branch $r4 > $r1 -> WRITE_CHECK
mov $rbc            // branch $r4 > $r1 -> WRITE_CHECK
targ WRITE_CHECK    // branch $r4 > $r1 -> WRITE_CHECK
bgt $r4             // branch $r4 > $r1 -> WRITE_CHECK

SUB_SET_BIT: // num >= div, so sub and set bit
get $r5  // 3-byte borrowed subtraction
sub $r2  // 3-byte borrowed subtraction
ccc      // 3-byte borrowed subtraction
get $r4  // 3-byte borrowed subtraction
subc $r1 // 3-byte borrowed subtraction
ccc      // 3-byte borrowed subtraction
get $r3  // 3-byte borrowed subtraction
subc $r0 // 3-byte borrowed subtraction
get $r9  // set bit with mod of index
set $r11  // set bit with mod of index

// want index == 8 -> then write the left half of output
WRITE_CHECK:
acc 8
mov $rbc
targ LOOP_CHECK
bne $r9 // if index != 8, go to LOOP_CHECK
acc 10  // index == 8, so write $r11 to mem and clear
st $r11
acc 0
mov $r11

LOOP_CHECK:
shr $r3  // 3-byte carry out right shift
ccc      // 3-byte carry out right shift
shrc $r4 // 3-byte carry out right shift
ccc      // 3-byte carry out right shift
shrc $r5 // 3-byte carry out right shift
targ PRECISION
bez $r9  // precision if index == 0
dec $r9  // otherwise, index--
targ MAIN_LOOP
bez $rz  // jmp to MAIN_LOOP for another iter


PRECISION:

get $r0             // branch $r3 > $r0 -> MEMSTORE
mov $rbc            // branch $r3 > $r0 -> MEMSTORE
targ MEMSTORE       // branch $r3 > $r0 -> MEMSTORE
bgt $r3             // branch $r3 > $r0 -> MEMSTORE

targ ROUND_UP       // branch $r3 < $r0 -> ROUND_UP
blt $r3             // branch $r3 < $r0 -> ROUND_UP

get $r1             // branch $r4 > $r1 -> MEMSTORE
mov $rbc            // branch $r4 > $r1 -> MEMSTORE
targ MEMSTORE       // branch $r4 > $r1 -> MEMSTORE
bgt $r4             // branch $r4 > $r1 -> MEMSTORE

targ ROUND_UP       // branch $r4 < $r1 -> ROUND_UP
blt $r4             // branch $r4 < $r1 -> ROUND_UP

get $rz             // branch $r5 > $rz -> MEMSTORE
mov $rbc            // branch $r5 > $rz -> MEMSTORE
targ MEMSTORE       // branch $r5 > $rz -> MEMSTORE
bgt $r5             // branch $r5 > $rz -> MEMSTORE

ROUND_UP:
acc 1
add $r11

MEMSTORE:
// store $r11 to mem 11
acc 11
st $r11

// clear out all registers used
acc 0
mov $r0
mov $r1
mov $r2
mov $r3
mov $r4
mov $r5
mov $r8
mov $r9
mov $r11
