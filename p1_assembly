//program 1 - input addr 8-9, output addr 10-11
// TODO: CORNER CHECKS (0, 1, mmm is 15)

// $r1|$r0 - div
// $r3|$r2 - num
// $r6 - result setter
// $r7 - index
// $r8 - left shift amount

acc 8
ld $r1 // div[15:8]
acc 9
ld $r0 // div[7:0]

// acc 128
// TEMP
acc 8
shl $ra
shl $ra
shl $ra
shl $ra
mov $r3 // num[15:8] = 10000000
acc 0
mov $r2 // num[7:0] = 00000000

// Generate "index" index and left shift amount
// $r7 = index
// $r8 = lsa
// we want index = lsa = 15 - overall mmm

targ LEFTNZ
bez $r0
// if div[15:8] > 0
acc 15
mov $r7 // index = 15
mov $r8 // lsa = 15
mmm $r0
sub $r7 // index = 15-m
sub $r8 // lsa = 15-m
targ LEFT_SHIFT_PREP
bez $rz

LEFTNZ:
// if div[15:8] == 0
acc 7
mov $r7 // index = 7
mov $r8 // lsa = 7
mmm $r0
sub $r7 // index = 7-m
sub $r8 // lsa = 7-m


// left shifts $r1|$r0 until mmm of $r1 is 1
// dec left shift amount each iter
LEFT_SHIFT_PREP:
targ MAIN_LOOP
bez $r8 // dont loop if lsa = 0
LEFT_SHIFT:
// 2-byte carry out left shift
shl $r0
ccc
shlc $r1
dec $r8
targ LEFT_SHIFT
bnz $r8

// $r1|$r0 is left shifted all the way
// $r7 contains how much we shifted

MAIN_LOOP:

// if num < div, skip over SET_BIT and go to WRITE_CHECK
get $r3             // branch $r1 > $r3 -> WRITE_CHECK
mov $rbc            // branch $r1 > $r3 -> WRITE_CHECK
targ WRITE_CHECK    // branch $r1 > $r3 -> WRITE_CHECK
bgt $r1             // branch $r1 > $r3 -> WRITE_CHECK

targ SUB_SET_BIT    // branch $r1 < $r3 -> SUB_SET_BIT
blt $r1             // branch $r1 < $r3 -> SUB_SET_BIT

get $r2             // branch $r0 > $r2 -> WRITE_CHECK
mov $rbc            // branch $r0 > $r2 -> WRITE_CHECK
targ WRITE_CHECK    // branch $r0 > $r2 -> WRITE_CHECK
bgt $r0             // branch $r0 > $r2 -> WRITE_CHECK

SUB_SET_BIT: // num >= div, so sub and set bit
// 2-byte borrowed subtraction
get $r0
sub $r2
ccc
get $r1
subc $r3
// set bit with mod of index
get $r7
set $r6

// want index == 8 -> then write the left half of output
WRITE_CHECK:
acc 8
mov $rbc
targ LOOP_CHECK
bne $r7 // if index != 8, go to LOOP_CHECK
// index == 8, so write $r6 to mem and clear
acc 10
st $r6
acc 0
mov $r6

LOOP_CHECK:
// 2-byte carry out right shift
shr $r1
ccc
shrc $r0
dec $r7          // decrement index until 0
targ DONE
bez $r7          // done after index hits 0
targ MAIN_LOOP
bez $rz         // otherwise, jmp to MAIN_LOOP for another iter


DONE:
// TODO: PRECISION
// disgusting corner case of carry out = 0 -> get mem 10 and inc and restore

// store $r6 to mem 11
acc 11
st $r6
halt

// MAKE SURE TO CLEAR ALL REGISTERS

// program 2 - input addr 0-1, 2, output addr 4-6
// TODO: CORNER CHECKS

// $r2|r1|$r0 - div
// $r5|$r4|$r3 - num
// $r6 - result setter
// $r7 - index
// $r8 - left shift amount

acc 0
ld $r5  // num[23:16]
acc 1
ld $r4  // num[15:8]
acc 0
mov $r3 // num[7:0] = 00000000

acc 0
mov $r3 // div[23:16] = 00000000
acc 0
mov $r2 // div[15:8] = 00000000
acc 2
ld $r0  // div[7:0]

// set $ra to 23
acc 7
bcc 1
mov $r7 // index = 23
mov $r8 // lsa = 23
mmm $r0
sub $r7 // index = 23 - mmm
sub $r8 // lsa = 23 - mmm


// left shifts $r2|$r1|$r0 until mmm of $r2 is 1
// dec left shift amount each iter (will always loop >= 16 times)
LEFT_SHIFT:
// 3-byte carry out left shift
shl $r0
ccc
shlc $r1
ccc
shlc $r2
dec $r8
targ LEFT_SHIFT
bnz $r8


MAIN_LOOP:

// if num < div, skip over SET_BIT and go to WRITE_CHECK

get $r5             // branch $r2 > $r5 -> WRITE_CHECK
mov $rbc            // branch $r2 > $r5 -> WRITE_CHECK
targ WRITE_CHECK    // branch $r2 > $r5 -> WRITE_CHECK
bgt $r2             // branch $r2 > $r5 -> WRITE_CHECK

targ SUB_SET_BIT    // branch $r2 < $r5 -> SUB_SET_BIT
blt $r2             // branch $r2 < $r5 -> SUB_SET_BIT

get $r4             // branch $r1 > $r4 -> WRITE_CHECK
mov $rbc            // branch $r1 > $r4 -> WRITE_CHECK
targ WRITE_CHECK    // branch $r1 > $r4 -> WRITE_CHECK
bgt $r1             // branch $r1 > $r4 -> WRITE_CHECK

targ SUB_SET_BIT    // branch $r1 < $r4 -> SUB_SET_BIT
blt $r1             // branch $r1 < $r4 -> SUB_SET_BIT

get $r3             // branch $r0 > $r3 -> WRITE_CHECK
mov $rbc            // branch $r0 > $r3 -> WRITE_CHECK
targ WRITE_CHECK    // branch $r0 > $r3 -> WRITE_CHECK
bgt $r0             // branch $r0 > $r3 -> WRITE_CHECK

SUB_SET_BIT: // num >= div, so sub and set bit
// 3-byte borrowed subtraction
get $r0
sub $r3
ccc
get $r1
subc $r4
ccc
get $r2
subc $r5
// set bit with mod of index
get $r7
set $r6

// if index == 8 or index == 16, then write the left parts of output
WRITE_CHECK:
acc 8
mov $rbc
targ WRITE_MEM
beq $r7 // if index == 8, go to WRITE_MEM

// index != 8, but check if index == 16
acc 16
mov $rbc
targ LOOP_CHECK
bne $r7 // if index != 16, go to LOOP_CHECK

WRITE_MEM:
// index == 8 or index == 16, so write $r6 to mem and clear
acc 10
st $r6
acc 0
mov $r6

LOOP_CHECK:
// 3-byte carry out right shift
shr $r2
ccc
shrc $r1
ccc
shrc $r0
dec $r7         // decrement index until 0
targ DONE
bez $r7         // done after index hits 0
targ MAIN_LOOP
bez $rz        // otherwise, jmp to MAIN_LOOP for another iter


DONE:
// TODO: PRECISION
// disgusting corner case of carry out = 0 -> get mem 10 and inc and restore

// store $r6 to mem 11
acc 11
st $r6
halt

// MAKE SURE TO CLEAR ALL REGISTERS

// program 3 - input addr 12-13, output addr 14
// TODO: CORNER CHECKS

// $r5|$r4 - x_curr
// $r3|$r2 - x_0
// $r1|$r0 - x_curr

acc 12
ld $r5 // x[15:8]
acc 13
ld $r4 // x[7:0]
acc 12
ld $r3 // x[15:8]
acc 13
ld $r2 // x[7:0]
acc 12
ld $r1 // x[15:8]
acc 13
ld $r0 // x[7:0]

SQRT_LOOP:

map mem ($r3 thru $r0)
call division with $r3|$r2 and $r1 -> put mmm16 in $r7|$r6
map $r6 and map $r7
remap mem ($r3 thru $r0)
call division with $r3|$r2 and $r0 -> put mmm16 in $r5|$r4
remap mem ($r7, $r6, $r3 thru $r0)

// want to add $r7|$r6 + $r5|$r4 -> $r5|$r4
get $r6
add $r4
ccc
get $r7
addc $r5
// transfer $r5|$r4 -> $r1|$r0
get $r5
mov $r1
get $r4
mov $r0
// right shift with carry $r1|$r0
rshift $r1
ccc
rshift $r0

dec $r9
targ SQRT_LOOP
bnz $r9

acc 14
st $r0

acc 0
