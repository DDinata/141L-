TODO:
all special bits in same register
mov/get use alu nop and just add mux
add alu instructions
figure out precision bit


00000  ADD   
00001  ADDC  
00010  SUB   
00011  SUBC  
00100  SHL   
00101  SHLC  
00110  SHR   
00111  SHRC  
01000  INC   
01001  DEC   
01010  MSB   
01011  LSB   

01100  CCC
01101  SET - set bit according to $ra[2:0]
01110
01111  

10000  BEZ - reg == 0
10001  BNZ - reg != 0
10010  BEQ - reg == bc 
10011  BNE - reg != bc
10100  BGT - reg > bc
10101  BLT - reg < bc
10110  SBD - set branch direction bit - 0 negative 1 positive
10111  

11000  LD    
11001  ST    
11100  MOV   
11101  GET   
11110  ACC   
11111  BCC   


CCC  values
2 - cp carry out to carry in
3 - cp carry out to precision bit
4 - cp precision to carry in



Special 

0 - ignore carry in
1 - use carry in

0 - shift left
1 - shift right

0 - Acc to Reg
1 - Reg to Acc

0 - branch equal 0
1 - branch not equal 0

true ? a : b = a

Special registers:
R_15, accumulator
R_14, branch comparison register
R_13, branch target register
R_11, special bit register: 0 - carry out, 1 - carry in, 2 - precision bit, 3 - branch direction bit
R_10, zero register
R_9, set register

reg_file, dat_mem, instr_rom done
alu, decoder decent

TODO:
WRITE PROGRAMS IN ASSEMBLY
PC AND BRANCHING
ASSEMBLER



specs:
9-bit instructions
256 bytes of memory (8-bit addressable), byte-wide
16 registers (8 bit wide)
can only read/write memory once per instruction
can only write to register file once per instruction
can write an additional flag bit once per intruction
can read multiple times from register file per instruction

EVERYTHING IS ROUNDED AT LSB

programs:
p1 - multiplicative inverse
input: 16-bit unsigned integer (address 8-9)
input format is: |2^15|..|2^0|
output: 16-bit fractional result (address 10-11)
output format is: |2^0|..|2^-15|

p2 - division
input: 16-bit unsigned integer numerator (address 0-1), 8-bit unsigned integer divisor (address 2)
output: 16-bit unsigned integer quotient + 8-bit unsigned quotient fraction (address 4-6)
output format is: |2^15|..|2^-8|

p3 - square root
input: 16-bit unsigned integer (address 16-17)
input format is: |2^15|..|2^0|
output: 8-bit result (address 18)
ouput format is: |2^7|..|2^0|
