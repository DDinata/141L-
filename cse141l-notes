TODO:
carry in and carry out same register
all special bits in same register
mov/get use alu nop and just add mux
figure out precision bit


ADD     0000 - |REG(4)|C(1)| - REG = REG + ACC
SUB     0001 - |REG(4)|C(1)| - REG = REG - ACC

SHL     0010 - |REG(4)|C(1)|
SHR     0011 - |REG(4)|C(1)|

LD      0100 - |REG(4)|
ST      0101 - |REG(4)|

MOV     1100 - |REG(4)|
GET     1101 - |REG(4)|
MSB     1110 - |REG(4)|
ACC     1111 - |IMM(5)|

CCC  - do particular stuff
0 - clear carry out
1 - clear carry in
2 - cp carry out to carry in
3 - cp carry out to precision bit
4 - cp precision to carry in
8 - compute $r_a % 8

INC
DEC = INC, $r, 1

SET - set bit according to value in $r_a

BEZ     1010 - |REG(4)|N(1)|

Special 

0 - ignore carry in
1 - use carry in

0 - shift left
1 - shift right

0 - Acc to Reg
1 - Reg to Acc

0 - branch equal 0
1 - branch not equal 0

true ? a : b = a

Special registers:
R_15, accumulator
R_14, branch comparison register
R_13, branch target register
R_11, special bit register: 0 - carry out, 1 - carry in, 2 - precision bit
R_10, zero register
R_9, set register

reg_file, dat_mem, instr_rom done
alu, decoder decent

TODO:
WRITE PROGRAMS IN ASSEMBLY
PC AND BRANCHING
ASSEMBLER



specs:
9-bit instructions
256 bytes of memory (8-bit addressable), byte-wide
16 registers (8 bit wide)
can only read/write memory once per instruction
can only write to register file once per instruction
can write an additional flag bit once per intruction
can read multiple times from register file per instruction

EVERYTHING IS ROUNDED AT LSB

programs:
p1 - multiplicative inverse
input: 16-bit unsigned integer (address 8-9)
input format is: |2^15|..|2^0|
output: 16-bit fractional result (address 10-11)
output format is: |2^0|..|2^-15|

p2 - division
input: 16-bit unsigned integer numerator (address 0-1), 8-bit unsigned integer divisor (address 2)
output: 16-bit unsigned integer quotient + 8-bit unsigned quotient fraction (address 4-6)
output format is: |2^15|..|2^-8|

p3 - square root
input: 16-bit unsigned integer (address 16-17)
input format is: |2^15|..|2^0|
output: 8-bit result (address 18)
ouput format is: |2^7|..|2^0|
